<?php
/**
 * The public-facing functionality of the plugin.
 *
 * @link       https://yourwebsite.com
 * @since      1.0.0
 *
 * @package    Ai_Cv_Builder
 * @subpackage Ai_Cv_Builder/public
 */

/**
 * The public-facing functionality of the plugin.
 *
 * Defines the plugin name, version, and hooks for shortcodes and
 * enqueuing public-facing stylesheets and JavaScript.
 *
 * @package    Ai_Cv_Builder
 * @subpackage Ai_Cv_Builder/public
 * @author     Your Name <email@example.com>
 */
class Ai_Cv_Builder_Public {

    /**
     * The ID of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $plugin_name    The ID of this plugin.
     */
    private $plugin_name;

    /**
     * The version of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $version    The current version of this plugin.
     */
    private $version;

    /**
     * The handle for the main React application script.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $react_app_handle    Script handle.
     */
    private $react_app_handle = 'ai-cv-builder-app';

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     * @param      string    $plugin_name       The name of the plugin.
     * @param      string    $version    The version of this plugin.
     */
    public function __construct( $plugin_name, $version ) {
        $this->plugin_name = $plugin_name;
        $this->version = $version;
    }

    /**
     * Register the stylesheets for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_styles() {
        // Assuming Vite extracts CSS to style.css in the output directory specified in vite.config.ts
        // The handle used here ($this->react_app_handle) should be consistent if CSS is tied to the JS bundle.
        // Or, use a new handle if preferred for CSS.
        // Check if the file exists before trying to enqueue it.
        if (file_exists(AI_CV_BUILDER_PLUGIN_DIR . 'assets/dist/style.css')) {
             wp_register_style(
                $this->react_app_handle . '-style', // You can use the same handle or a distinct one for styles
                AI_CV_BUILDER_PLUGIN_URL . 'assets/dist/style.css',
                array(),
                $this->version,
                'all'
            );
        }
    }

    /**
     * Register the JavaScript for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_scripts() {
        // This script is registered here but will be enqueued by the shortcode callback
        // to ensure it only loads when the shortcode is present.

        // IMPORTANT: The path to the built React app JS and CSS needs to be confirmed after setting up the build process.
        // Assuming Vite outputs to `assets/dist/` for now.
        // The actual filename might include a hash, so the build process needs to be predictable or generate a manifest.
        // For simplicity in this step, using a fixed name like `main.js`.
        // A more robust solution involves reading a manifest file generated by Vite.

        wp_register_script(
            $this->react_app_handle,
            AI_CV_BUILDER_PLUGIN_URL . 'assets/dist/main.js', // Placeholder: Update with actual path from Vite build
            array(), // Dependencies
            $this->version,
            true // In footer
        );

        // Localize script with data for the React app
        $api_key = get_option( 'ai_cv_builder_gemini_api_key' );
        $api_key_configured = !empty( $api_key );

        wp_localize_script(
            $this->react_app_handle,
            'aiCvBuilderData', // Object name in JavaScript (window.aiCvBuilderData)
            array(
                'ajax_url' => admin_url( 'admin-ajax.php' ),
                'nonce'    => wp_create_nonce( $this->plugin_name . '_nonce' ), // Matches nonce check in AJAX handler
                'api_key_configured' => $api_key_configured,
                'plugin_url' => AI_CV_BUILDER_PLUGIN_URL, // Useful for assets within React app
                 // Add other data your React app might need from PHP
            )
        );
    }

    /**
     * Register shortcodes.
     *
     * @since    1.0.0
     */
    public function register_shortcodes() {
        add_shortcode( 'ai_cv_builder', array( $this, 'render_ai_cv_builder_shortcode' ) );
    }

    /**
     * Callback function for the [ai_cv_builder] shortcode.
     *
     * This function will output the div for the React app and enqueue necessary scripts/styles.
     *
     * @since    1.0.0
     * @param  array  $atts Shortcode attributes.
     * @return string HTML output for the shortcode.
     */
    public function render_ai_cv_builder_shortcode( $atts ) {
        wp_enqueue_script( $this->react_app_handle );

        // Enqueue the style if it was registered
        if (wp_style_is( $this->react_app_handle . '-style', 'registered' )) {
            wp_enqueue_style( $this->react_app_handle . '-style' );
        }

        // Provide the root element for the React application
        return '<div id="ai-cv-builder-root">Loading CV Builder...</div>';
    }
}
